CREATE TABLE "confirm_notifications" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "confirm_notifications_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"user_id" text NOT NULL,
	"trip_title_en" text NOT NULL,
	"trip_title_ru" text NOT NULL,
	"trip_booking_id" integer NOT NULL,
	"is_cancelled" boolean NOT NULL,
	"is_shown" boolean DEFAULT false
);
--> statement-breakpoint
CREATE TABLE "review_notifications" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "review_notifications_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"user_id" text NOT NULL,
	"trip_title_en" text NOT NULL,
	"trip_title_ru" text NOT NULL,
	"trip_booking_id" integer NOT NULL,
	"is_shown" boolean DEFAULT false
);
--> statement-breakpoint
ALTER TABLE "trip_bookings" ADD COLUMN "is_review_shown" boolean DEFAULT false;--> statement-breakpoint
ALTER TABLE "confirm_notifications" ADD CONSTRAINT "confirm_notifications_trip_booking_id_trip_bookings_id_fk" FOREIGN KEY ("trip_booking_id") REFERENCES "public"."trip_bookings"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "review_notifications" ADD CONSTRAINT "review_notifications_trip_booking_id_trip_bookings_id_fk" FOREIGN KEY ("trip_booking_id") REFERENCES "public"."trip_bookings"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "confirm_notifications_user_id_idx" ON "confirm_notifications" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "review_notifications_user_id_idx" ON "review_notifications" USING btree ("user_id");